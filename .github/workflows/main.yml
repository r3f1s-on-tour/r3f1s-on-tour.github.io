name: Build and deploy pages

on:
  push:
    branches: [ "main" ]
    paths:
      - "docs/**"
      - "mkdocs.yml"
      - ".github/workflows/main.yml"
      # - "scripts/**"
      # - "templates/**"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    # Optionaler Schutz: starte nicht bei Bot-Pushes (weil wir am Ende committen)
    # if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    env:
      COMMIT_BANNER_CHANGES: "true"   # Commit am ENDE des Build-Jobs
      DEBUG_BANNER: "1"               # optionales Debug-Log für die Zählung
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install mkdocs ruamel.yaml pyyaml
          fi
      - name: Debug secrets length
        run: |
          echo "SHEET_ID length: ${#SHEET_ID}"
          echo "SHEET_GID: ${SHEET_GID}"
        env:
          SHEET_ID:  ${{ secrets.SHEET_ID }}
          SHEET_GID: ${{ secrets.SHEET_GID }}
    
      - name: Download latest CSV (public sheet)
        env:
          SHEET_ID:  ${{ secrets.SHEET_ID }}
          SHEET_GID: ${{ secrets.SHEET_GID }}
          OUTPUT_CSV: scripts/banner.csv
        run: |
          python scripts/download_sheet_csv.py
          
      - name: Generate markdown from CSV
        run: |
          python3 scripts/make_banner_markdown.py \
          --csv scripts/banner.csv \
          --out docs/banner \
          --template template/banner.md \
          --overwrite
          
      - name: Show pre-change status
        run: |
          echo "PWD=$(pwd)"
          while IFS= read -r l; do printf 'docs: %s\n' "$l"; done < <(ls -la docs)
          while IFS= read -r l; do printf 'docs/banner: %s\n' "$l"; done < <(ls -la docs/banner || true)
          echo "----- docs/index.md (HEAD) -----"
          (test -f docs/index.md && sed -n '1,160p' docs/index.md) || echo "docs/index.md missing"

      # ⇨ erzeugt/überschreibt docs/index.md und docs/banner/index.md
      - name: Run banner pages updater
        run: python scripts/update_banner_pages.py

      # 2) Galerie erzeugen (einspaltig, lazy)
      - name: Build banner gallery
        run: |
          python scripts/make_banner_gallery.py \
            --root docs \
            --csv scripts/banner.csv \
            --banner_dir banner \
            --outfile gallery.md \
            --verbose

      # optionales Zusatzfile
      - name: Generate banner stats (optional)
        run: |
          python scripts/make_banner_stats.py --banner-dir docs/banner --out docs/banner/stats.md
        continue-on-error: true

      - name: Show post-change status (these files will be built)
        run: |
          echo "----- UPDATED docs/index.md -----"
          sed -n '1,220p' docs/index.md || true
          echo "----- UPDATED docs/banner/index.md -----"
          sed -n '1,220p' docs/banner/index.md || true
          echo "----- UPDATED docs/banner/stats.md -----"
          sed -n '1,160p' docs/banner/stats.md || echo "no stats.md (optional)"

      - name: Build MkDocs site
        run: mkdocs build --no-strict

      - name: Inspect built homepage
        run: |
          echo "----- site/index.html (grep) -----"
          grep -nE 'Total banners|Current progress|Next milestone|Latest banner|Last updated' site/index.html || true

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      # ✅ Commit & Push GANZ AM ENDE (nach Artifact-Upload)
      - name: Commit changes if any
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Nur Änderungen in docs/banner committen
          git add docs/banner
          git add data/*.geojson
          git add data/years/*.geojson

          if git diff --staged --quiet; then
            echo "Keine Änderungen in docs/banner."
          else
            git commit -m "Update generated banner markdown [skip ci]"
            git push
          fi
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
